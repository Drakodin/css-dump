$els: 30;
$top-colors: (red, green, yellow, deepskyblue);
$bottom-colors: (green, red, deepskyblue, yellow);

.root {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    height: 100%;
    display:flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    perspective: 1250px;
}

.ripple {
    position: absolute;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

.ripple > .top {
    width: calc(45% - 3.75px);
}

.ripple > .bottom {
    width: calc(45% - 3.75px);
}

.ripple-left-cap {
    transform-origin: center;
    transform: translateX(-7.5px) rotateY(90deg);
    height: 15px;
    width: 15px;
    background-color: #1b0096;
}

.ripple-right-cap {
    transform-origin: center;
    transform: translateX(7.5px) rotateY(90deg);
    height: 15px;
    width: 15px;
    background-color: #1b0096;
}

.ripple-square {
    position: relative;
    transform-origin: center;
    min-height: 15px;
    min-width: 100px;
    animation: ripple 5s linear infinite forwards;
    transform-style: preserve-3d;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

@keyframes ripple {
    0% {
        transform: rotateY(0deg);
    }
    50% {
        transform: rotateY(180deg);
    }
    100% {
        transform: rotateY(360deg);
    }
}

$rand: 0;
@for $i from 1 to $els {
    .root>.ripple-square:nth-of-type(#{$i}) {
        animation-delay: #{($i * 0.2) - 0.2}s;
    }
    $rand: random(length($top-colors));
    .root >.ripple-square:nth-of-type(#{$i}) .top {
        background-color: nth($top-colors, $rand);
    }

    .root >.ripple-square:nth-of-type(#{$i}) .bottom {
        background-color: nth($bottom-colors, $rand);
    }

    .root >.ripple-square:nth-of-type(#{$i}) .top::after {
        content: '';
        position: absolute;
        left: calc(45% - 3.75px);
        width: 0;
        height: 0;
    }

    .root >.ripple-square:nth-of-type(#{$i}) .bottom::before {
        content: '';
        position: absolute;
        transform: translateX(-7.5px);
        width: 0;
        height: 0;
    }

    @if $rand == 1 {
        .root >.ripple-square:nth-of-type(#{$i}) .top::after {
            border-top: 7.5px solid nth($top-colors, $rand);
            border-bottom: 7.5px solid nth($top-colors, $rand);
            border-right: 7.5px solid transparent;
        }

        .root >.ripple-square:nth-of-type(#{$i}) .bottom::before {
            border-top: 7.5px solid transparent;
            border-bottom: 7.5px solid transparent;
            border-right: 7.5px solid nth($bottom-colors, $rand);
        }
    }

    @else if $rand == 2 {
        .root >.ripple-square:nth-of-type(#{$i}) .top::after {
            border-top: 7.5px solid transparent;
            border-bottom: 7.5px solid transparent;
            border-left: 7.5px solid nth($top-colors, $rand);
        }

        .root >.ripple-square:nth-of-type(#{$i}) .bottom::before {
            border-top: 7.5px solid nth($bottom-colors, $rand);
            border-bottom: 7.5px solid nth($bottom-colors, $rand);
            border-left: 7.5px solid transparent;
        }
    }

    @else if $rand == 3 {
        .root >.ripple-square:nth-of-type(#{$i}) .top::after {
            background: nth($top-colors, $rand);
            width: 15px;
            height: 15px;
            left: calc(45% - 11.25px);
            border-radius: 50%;
        }

        .root >.ripple-square:nth-of-type(#{$i}) .bottom::before {
            background: nth($bottom-colors, $rand);
            width: 15px;
            height: 15px;
            transform: translateX(-11.25px);
            mask-image: radial-gradient(circle at 0% 50%, transparent 50%, nth($bottom-colors, $rand) 50%);
        }
    }

    @else if $rand == 4 {
        .root >.ripple-square:nth-of-type(#{$i}) .top::after {
            background: nth($top-colors, $rand);
            width: 15px;
            height: 15px;
            left: calc(45% - 7.5px);
            mask-image: radial-gradient(circle at 100% 50%, transparent 50%, nth($top-colors, $rand) 50%);
        }

        .root >.ripple-square:nth-of-type(#{$i}) .bottom::before {
            background: nth($bottom-colors, $rand);
            width: 15px;
            height: 15px;
            border-radius: 50%;
        }
    }
}