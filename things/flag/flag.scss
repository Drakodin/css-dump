@use "sass:math";
$pi: 3.1415926536;

/* math.atan($base * 0.1 * $pi * math.cos(0)) */

@mixin sinosoid($name, $amp, $base) {
    @keyframes #{$name} {
        0% {
            transform: translateZ(0px) rotateY(math.atan(($base + 1) * 0.075 * $pi * math.cos(0)));
        }
        25% {
            transform: translateZ(#{$amp}px) rotateY(0deg);
        }
        50% {
            transform: translateZ(0px) rotateY(math.atan( (-1) * ($base + 1) * 0.075 * $pi * math.cos(0)));
        }
        75% {
            transform: translateZ(-#{$amp}px) rotateY(0deg);
        }
        100% {
            transform: translateZ(0px) rotateY(math.atan(($base + 1) * 0.075 * $pi * math.cos(0)));
        }
    }
}

@mixin base-sinosoid($name) {
    @keyframes #{$name} {
        0% {
            transform: rotateY(math.atan(6 * 0.075 * $pi * math.cos(0)));
        }
        25% {
            transform: rotateY(0deg);
        }
        50% {
            transform: rotateY(math.atan( (-1) * 6 * 0.075 * $pi * math.cos(0)));
        }
        75% {
            transform: rotateY(0deg);
        }
        100% {
            transform: rotateY(math.atan(6 * 0.075 * $pi * math.cos(0)));
        }
    }
}

html, body {
    width: 100%;
    height: 100%;
    margin: 0;
    background: linear-gradient(#1a1477, #4e016d);
    perspective: 3000px;
}

#root {
    position: fixed;
    height: 75%;
    top: 10%;
    left: 35%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transform: translateX(-50%);
}

.pole {
    position: absolute;
    width: 10px;
    height: 100%;
    background: rgb(66, 47, 36);
}

.ball {
    position: absolute;
    top: 0;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: radial-gradient(circle at 70% 20%, #ffffff, #d1b200);
}

.flag-base {
    display: grid;
    grid-template-columns: repeat(40, 1fr);
    width: 320px;
    height: 160px;
    position: absolute;
    top: 30px;
    left: calc(-20% + 5px);
    flex-direction: column;
    flex-wrap: wrap;
    transform-style: preserve-3d;
}

@include sinosoid("sin-0", 0, 0);
@include sinosoid("sin-1", 10, 1);
@include sinosoid("sin-2", 20, 2);
@include sinosoid("sin-3", 30, 3);
@include sinosoid("sin-4", 40, 4);
@include sinosoid("sin-5", 50, 5);
@include base-sinosoid("base");

/* The Sass for the 800 pixels of the flag */
.flag-row-px {
    height: 8px;
    width: 16px;
    transform-style: preserve-3d;
    transform-origin: 0% 50%;

    $pix: 800;

    @for $i from 1 through $pix {
        @if ($i <= 160 or $i >= 641) {
            &:nth-of-type(#{$i}) {
                background-color: #73c2fb;
                @if ($i % 40 == 0) {
                    grid-column: 40;
                    z-index: 40;
                }
                @else {
                    grid-column: #{$i % 40} / span #{$i % 40 + 1};
                    z-index: #{$i % 40};
                }
                @if ($i - 1 < 0) {
                    grid-row: #{math.floor(math.div($i, 40)) + 1};
                }
                @else {
                    grid-row: #{math.floor(math.div($i - 1, 40)) + 1};
                }
            }
        }
        @else if ($i <= 320 or $i >= 481) {
            &:nth-of-type(#{$i}) {
                background-color: #f19cbb;
                @if ($i % 40 == 0) {
                    grid-column: 40;
                    z-index: 40;
                }
                @else {
                    grid-column: #{$i % 40} / span #{$i % 40 + 1};
                    z-index: #{$i % 40};
                }

                @if ($i - 1 < 0) {
                    grid-row: #{math.floor(math.div($i, 40)) + 1};
                }
                @else {
                    grid-row: #{math.floor(math.div($i - 1, 40)) + 1};
                }
            }
        }
        @else {
            &:nth-of-type(#{$i}) {
                background-color: #fff;
                @if ($i % 40 == 0) {
                    grid-column: 40;
                    z-index: 40;
                }
                @else {
                    grid-column: #{$i % 40} / span #{$i % 40 + 1};
                    z-index: #{$i % 40};
                }
                @if ($i - 1 < 0) {
                    grid-row: #{math.floor(math.div($i, 40)) + 1};
                }
                @else {
                    grid-row: #{math.floor(math.div($i - 1, 40)) + 1};
                }
            }
        }
    }

    &:nth-of-type(800) {
        grid-row: 20;
    }

    $i: 1;
    @while ($i < $pix) {
        &:nth-of-type(#{$i}) {
            animation: base 2s infinite linear;
        }
        $i: $i + 40
    }

    $i: 2;
    @while ($i < $pix) {
        &:nth-of-type(#{$i}) {
            animation: sin-5 2s infinite linear; 
            animation-delay: 0.2s;
        }
        $i: $i + 40
    }

    $i: 3;
    @while ($i < $pix) {
        &:nth-of-type(#{$i}) {
            animation: sin-5 2s infinite linear; 
            animation-delay: 0.4s;
        }
        $i: $i + 40
    }

    $i: 4;
    @while ($i < $pix) {
        &:nth-of-type(#{$i}) {
            animation: sin-5 2s infinite linear;
            animation-delay: 0.6s; 
        }
        $i: $i + 40
    }

    $i: 5;
    @while ($i < $pix) {
        &:nth-of-type(#{$i}) {
            animation: sin-5 2s infinite linear; 
            animation-delay: 0.8s;
        }
        $i: $i + 40
    }

    $i: 6;
    @while ($i <= $pix) {
        @if (($i - 1) % 40 >= 5) {
            $part: ($i - 1) % 40;
            &:nth-of-type(#{$i}) {
                animation: sin-5 2s infinite linear;
                animation-delay: #{$part * 0.2}s; 
            }
        }
        $i: $i + 1;
    }
}